
// Automatically generated file
var ref = require('ref');
var ffi = require('ffi');
var z3types = require('./z3types');

// Z3 API Functions
var z3core = module.exports = ffi.Library('libz3', {
  'Z3_global_param_set': [ref.types.void,[ref.types.CString,ref.types.CString]],
  'Z3_global_param_reset_all': [ref.types.void,[]],
  'Z3_global_param_get': [ref.types.bool,[ref.types.CString,ref.refType(ref.types.CString)]],
  'Z3_mk_config': [z3types.Config,[]],
  'Z3_del_config': [ref.types.void,[z3types.Config]],
  'Z3_set_param_value': [ref.types.void,[z3types.Config,ref.types.CString,ref.types.CString]],
  'Z3_mk_context': [z3types.Context,[z3types.Config]],
  'Z3_mk_context_rc': [z3types.Context,[z3types.Config]],
  'Z3_del_context': [ref.types.void,[z3types.Context]],
  'Z3_inc_ref': [ref.types.void,[z3types.Context,z3types.Ast]],
  'Z3_dec_ref': [ref.types.void,[z3types.Context,z3types.Ast]],
  'Z3_update_param_value': [ref.types.void,[z3types.Context,ref.types.CString,ref.types.CString]],
  'Z3_interrupt': [ref.types.void,[z3types.Context]],
  'Z3_mk_params': [z3types.Params,[z3types.Context]],
  'Z3_params_inc_ref': [ref.types.void,[z3types.Context,z3types.Params]],
  'Z3_params_dec_ref': [ref.types.void,[z3types.Context,z3types.Params]],
  'Z3_params_set_bool': [ref.types.void,[z3types.Context,z3types.Params,ref.types.long,ref.types.bool]],
  'Z3_params_set_uint': [ref.types.void,[z3types.Context,z3types.Params,ref.types.long,ref.types.uint]],
  'Z3_params_set_double': [ref.types.void,[z3types.Context,z3types.Params,ref.types.long,ref.types.double]],
  'Z3_params_set_symbol': [ref.types.void,[z3types.Context,z3types.Params,ref.types.long,ref.types.long]],
  'Z3_params_to_string': [ref.types.CString,[z3types.Context,z3types.Params]],
  'Z3_params_validate': [ref.types.void,[z3types.Context,z3types.Params,z3types.ParamDescrs]],
  'Z3_param_descrs_inc_ref': [ref.types.void,[z3types.Context,z3types.ParamDescrs]],
  'Z3_param_descrs_dec_ref': [ref.types.void,[z3types.Context,z3types.ParamDescrs]],
  'Z3_param_descrs_get_kind': [ref.types.uint,[z3types.Context,z3types.ParamDescrs,ref.types.long]],
  'Z3_param_descrs_size': [ref.types.uint,[z3types.Context,z3types.ParamDescrs]],
  'Z3_param_descrs_get_name': [ref.types.long,[z3types.Context,z3types.ParamDescrs,ref.types.uint]],
  'Z3_param_descrs_to_string': [ref.types.CString,[z3types.Context,z3types.ParamDescrs]],
  'Z3_mk_int_symbol': [ref.types.long,[z3types.Context,ref.types.int]],
  'Z3_mk_string_symbol': [ref.types.long,[z3types.Context,ref.types.CString]],
  'Z3_mk_uninterpreted_sort': [z3types.Sort,[z3types.Context,ref.types.long]],
  'Z3_mk_bool_sort': [z3types.Sort,[z3types.Context]],
  'Z3_mk_int_sort': [z3types.Sort,[z3types.Context]],
  'Z3_mk_real_sort': [z3types.Sort,[z3types.Context]],
  'Z3_mk_bv_sort': [z3types.Sort,[z3types.Context,ref.types.uint]],
  'Z3_mk_finite_domain_sort': [z3types.Sort,[z3types.Context,ref.types.long,ref.types.uint64]],
  'Z3_mk_array_sort': [z3types.Sort,[z3types.Context,z3types.Sort,z3types.Sort]],
  'Z3_mk_tuple_sort': [z3types.Sort,[z3types.Context,ref.types.long,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.Sort),ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl)]],
  'Z3_mk_enumeration_sort': [z3types.Sort,[z3types.Context,ref.types.long,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl)]],
  'Z3_mk_list_sort': [z3types.Sort,[z3types.Context,ref.types.long,z3types.Sort,ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl)]],
  'Z3_mk_constructor': [z3types.Constructor,[z3types.Context,ref.types.long,ref.types.long,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.Sort),ref.refType(ref.types.uint)]],
  'Z3_del_constructor': [ref.types.void,[z3types.Context,z3types.Constructor]],
  'Z3_mk_datatype': [z3types.Sort,[z3types.Context,ref.types.long,ref.types.uint,ref.refType(z3types.Constructor)]],
  'Z3_mk_constructor_list': [z3types.ConstructorList,[z3types.Context,ref.types.uint,ref.refType(z3types.Constructor)]],
  'Z3_del_constructor_list': [ref.types.void,[z3types.Context,z3types.ConstructorList]],
  'Z3_mk_datatypes': [ref.types.void,[z3types.Context,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.Sort),ref.refType(z3types.ConstructorList)]],
  'Z3_query_constructor': [ref.types.void,[z3types.Context,z3types.Constructor,ref.types.uint,ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl),ref.refType(z3types.FuncDecl)]],
  'Z3_mk_func_decl': [z3types.FuncDecl,[z3types.Context,ref.types.long,ref.types.uint,ref.refType(z3types.Sort),z3types.Sort]],
  'Z3_mk_app': [z3types.Ast,[z3types.Context,z3types.FuncDecl,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_const': [z3types.Ast,[z3types.Context,ref.types.long,z3types.Sort]],
  'Z3_mk_fresh_func_decl': [z3types.FuncDecl,[z3types.Context,ref.types.CString,ref.types.uint,ref.refType(z3types.Sort),z3types.Sort]],
  'Z3_mk_fresh_const': [z3types.Ast,[z3types.Context,ref.types.CString,z3types.Sort]],
  'Z3_mk_true': [z3types.Ast,[z3types.Context]],
  'Z3_mk_false': [z3types.Ast,[z3types.Context]],
  'Z3_mk_eq': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_distinct': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_not': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_ite': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_iff': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_implies': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_xor': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_and': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_or': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_add': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_mul': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_sub': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_unary_minus': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_div': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_mod': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_rem': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_power': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_lt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_le': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_gt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_ge': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_int2real': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_real2int': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_is_int': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_bvnot': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_bvredand': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_bvredor': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_bvand': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvor': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvxor': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvnand': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvnor': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvxnor': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvneg': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_bvadd': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsub': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvmul': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvudiv': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsdiv': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvurem': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsrem': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsmod': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvult': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvslt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvule': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsle': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvuge': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsge': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvugt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsgt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_concat': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_extract': [z3types.Ast,[z3types.Context,ref.types.uint,ref.types.uint,z3types.Ast]],
  'Z3_mk_sign_ext': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Ast]],
  'Z3_mk_zero_ext': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Ast]],
  'Z3_mk_repeat': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Ast]],
  'Z3_mk_bvshl': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvlshr': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvashr': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_rotate_left': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Ast]],
  'Z3_mk_rotate_right': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Ast]],
  'Z3_mk_ext_rotate_left': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_ext_rotate_right': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_int2bv': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Ast]],
  'Z3_mk_bv2int': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.bool]],
  'Z3_mk_bvadd_no_overflow': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,ref.types.bool]],
  'Z3_mk_bvadd_no_underflow': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsub_no_overflow': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvsub_no_underflow': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,ref.types.bool]],
  'Z3_mk_bvsdiv_no_overflow': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_bvneg_no_overflow': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_bvmul_no_overflow': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,ref.types.bool]],
  'Z3_mk_bvmul_no_underflow': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_select': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_store': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_const_array': [z3types.Ast,[z3types.Context,z3types.Sort,z3types.Ast]],
  'Z3_mk_map': [z3types.Ast,[z3types.Context,z3types.FuncDecl,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_array_default': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_set_sort': [z3types.Sort,[z3types.Context,z3types.Sort]],
  'Z3_mk_empty_set': [z3types.Ast,[z3types.Context,z3types.Sort]],
  'Z3_mk_full_set': [z3types.Ast,[z3types.Context,z3types.Sort]],
  'Z3_mk_set_add': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_set_del': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_set_union': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_set_intersect': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_set_difference': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_set_complement': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_set_member': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_set_subset': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_numeral': [z3types.Ast,[z3types.Context,ref.types.CString,z3types.Sort]],
  'Z3_mk_real': [z3types.Ast,[z3types.Context,ref.types.int,ref.types.int]],
  'Z3_mk_int': [z3types.Ast,[z3types.Context,ref.types.int,z3types.Sort]],
  'Z3_mk_unsigned_int': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Sort]],
  'Z3_mk_int64': [z3types.Ast,[z3types.Context,ref.types.int64,z3types.Sort]],
  'Z3_mk_unsigned_int64': [z3types.Ast,[z3types.Context,ref.types.uint64,z3types.Sort]],
  'Z3_mk_pattern': [z3types.Pattern,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_bound': [z3types.Ast,[z3types.Context,ref.types.uint,z3types.Sort]],
  'Z3_mk_forall': [z3types.Ast,[z3types.Context,ref.types.uint,ref.types.uint,ref.refType(z3types.Pattern),ref.types.uint,ref.refType(z3types.Sort),ref.refType(ref.types.long),z3types.Ast]],
  'Z3_mk_exists': [z3types.Ast,[z3types.Context,ref.types.uint,ref.types.uint,ref.refType(z3types.Pattern),ref.types.uint,ref.refType(z3types.Sort),ref.refType(ref.types.long),z3types.Ast]],
  'Z3_mk_quantifier': [z3types.Ast,[z3types.Context,ref.types.bool,ref.types.uint,ref.types.uint,ref.refType(z3types.Pattern),ref.types.uint,ref.refType(z3types.Sort),ref.refType(ref.types.long),z3types.Ast]],
  'Z3_mk_quantifier_ex': [z3types.Ast,[z3types.Context,ref.types.bool,ref.types.uint,ref.types.long,ref.types.long,ref.types.uint,ref.refType(z3types.Pattern),ref.types.uint,ref.refType(z3types.Ast),ref.types.uint,ref.refType(z3types.Sort),ref.refType(ref.types.long),z3types.Ast]],
  'Z3_mk_forall_const': [z3types.Ast,[z3types.Context,ref.types.uint,ref.types.uint,ref.refType(z3types.App),ref.types.uint,ref.refType(z3types.Pattern),z3types.Ast]],
  'Z3_mk_exists_const': [z3types.Ast,[z3types.Context,ref.types.uint,ref.types.uint,ref.refType(z3types.App),ref.types.uint,ref.refType(z3types.Pattern),z3types.Ast]],
  'Z3_mk_quantifier_const': [z3types.Ast,[z3types.Context,ref.types.bool,ref.types.uint,ref.types.uint,ref.refType(z3types.App),ref.types.uint,ref.refType(z3types.Pattern),z3types.Ast]],
  'Z3_mk_quantifier_const_ex': [z3types.Ast,[z3types.Context,ref.types.bool,ref.types.uint,ref.types.long,ref.types.long,ref.types.uint,ref.refType(z3types.App),ref.types.uint,ref.refType(z3types.Pattern),ref.types.uint,ref.refType(z3types.Ast),z3types.Ast]],
  'Z3_get_symbol_kind': [ref.types.uint,[z3types.Context,ref.types.long]],
  'Z3_get_symbol_int': [ref.types.int,[z3types.Context,ref.types.long]],
  'Z3_get_symbol_string': [ref.types.CString,[z3types.Context,ref.types.long]],
  'Z3_get_sort_name': [ref.types.long,[z3types.Context,z3types.Sort]],
  'Z3_get_sort_id': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_sort_to_ast': [z3types.Ast,[z3types.Context,z3types.Sort]],
  'Z3_is_eq_sort': [ref.types.bool,[z3types.Context,z3types.Sort,z3types.Sort]],
  'Z3_get_sort_kind': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_get_bv_sort_size': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_get_finite_domain_sort_size': [ref.types.bool,[z3types.Context,z3types.Sort,ref.refType(ref.types.uint64)]],
  'Z3_get_array_sort_domain': [z3types.Sort,[z3types.Context,z3types.Sort]],
  'Z3_get_array_sort_range': [z3types.Sort,[z3types.Context,z3types.Sort]],
  'Z3_get_tuple_sort_mk_decl': [z3types.FuncDecl,[z3types.Context,z3types.Sort]],
  'Z3_get_tuple_sort_num_fields': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_get_tuple_sort_field_decl': [z3types.FuncDecl,[z3types.Context,z3types.Sort,ref.types.uint]],
  'Z3_get_datatype_sort_num_constructors': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_get_datatype_sort_constructor': [z3types.FuncDecl,[z3types.Context,z3types.Sort,ref.types.uint]],
  'Z3_get_datatype_sort_recognizer': [z3types.FuncDecl,[z3types.Context,z3types.Sort,ref.types.uint]],
  'Z3_get_datatype_sort_constructor_accessor': [z3types.FuncDecl,[z3types.Context,z3types.Sort,ref.types.uint,ref.types.uint]],
  'Z3_datatype_update_field': [z3types.Ast,[z3types.Context,z3types.FuncDecl,z3types.Ast,z3types.Ast]],
  'Z3_get_relation_arity': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_get_relation_column': [z3types.Sort,[z3types.Context,z3types.Sort,ref.types.uint]],
  'Z3_mk_atmost': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast),ref.types.uint]],
  'Z3_mk_pble': [z3types.Ast,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast),ref.refType(ref.types.int),ref.types.int]],
  'Z3_func_decl_to_ast': [z3types.Ast,[z3types.Context,z3types.FuncDecl]],
  'Z3_is_eq_func_decl': [ref.types.bool,[z3types.Context,z3types.FuncDecl,z3types.FuncDecl]],
  'Z3_get_func_decl_id': [ref.types.uint,[z3types.Context,z3types.FuncDecl]],
  'Z3_get_decl_name': [ref.types.long,[z3types.Context,z3types.FuncDecl]],
  'Z3_get_decl_kind': [ref.types.uint,[z3types.Context,z3types.FuncDecl]],
  'Z3_get_domain_size': [ref.types.uint,[z3types.Context,z3types.FuncDecl]],
  'Z3_get_arity': [ref.types.uint,[z3types.Context,z3types.FuncDecl]],
  'Z3_get_domain': [z3types.Sort,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_range': [z3types.Sort,[z3types.Context,z3types.FuncDecl]],
  'Z3_get_decl_num_parameters': [ref.types.uint,[z3types.Context,z3types.FuncDecl]],
  'Z3_get_decl_parameter_kind': [ref.types.uint,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_decl_int_parameter': [ref.types.int,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_decl_double_parameter': [ref.types.double,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_decl_symbol_parameter': [ref.types.long,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_decl_sort_parameter': [z3types.Sort,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_decl_ast_parameter': [z3types.Ast,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_decl_func_decl_parameter': [z3types.FuncDecl,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_get_decl_rational_parameter': [ref.types.CString,[z3types.Context,z3types.FuncDecl,ref.types.uint]],
  'Z3_app_to_ast': [z3types.Ast,[z3types.Context,z3types.App]],
  'Z3_get_app_decl': [z3types.FuncDecl,[z3types.Context,z3types.App]],
  'Z3_get_app_num_args': [ref.types.uint,[z3types.Context,z3types.App]],
  'Z3_get_app_arg': [z3types.Ast,[z3types.Context,z3types.App,ref.types.uint]],
  'Z3_is_eq_ast': [ref.types.bool,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_get_ast_id': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_get_ast_hash': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_get_sort': [z3types.Sort,[z3types.Context,z3types.Ast]],
  'Z3_is_well_sorted': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_get_bool_value': [ref.types.int,[z3types.Context,z3types.Ast]],
  'Z3_get_ast_kind': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_is_app': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_is_numeral_ast': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_is_algebraic_number': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_to_app': [z3types.App,[z3types.Context,z3types.Ast]],
  'Z3_to_func_decl': [z3types.FuncDecl,[z3types.Context,z3types.Ast]],
  'Z3_get_numeral_string': [ref.types.CString,[z3types.Context,z3types.Ast]],
  'Z3_get_numeral_decimal_string': [ref.types.CString,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_get_numerator': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_get_denominator': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_get_numeral_small': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.int64),ref.refType(ref.types.int64)]],
  'Z3_get_numeral_int': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.int)]],
  'Z3_get_numeral_uint': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.uint)]],
  'Z3_get_numeral_uint64': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.uint64)]],
  'Z3_get_numeral_int64': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.int64)]],
  'Z3_get_numeral_rational_int64': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.int64),ref.refType(ref.types.int64)]],
  'Z3_get_algebraic_number_lower': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_get_algebraic_number_upper': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_pattern_to_ast': [z3types.Ast,[z3types.Context,z3types.Pattern]],
  'Z3_get_pattern_num_terms': [ref.types.uint,[z3types.Context,z3types.Pattern]],
  'Z3_get_pattern': [z3types.Ast,[z3types.Context,z3types.Pattern,ref.types.uint]],
  'Z3_get_index_value': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_is_quantifier_forall': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_get_quantifier_weight': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_get_quantifier_num_patterns': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_get_quantifier_pattern_ast': [z3types.Pattern,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_get_quantifier_num_no_patterns': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_get_quantifier_no_pattern_ast': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_get_quantifier_num_bound': [ref.types.uint,[z3types.Context,z3types.Ast]],
  'Z3_get_quantifier_bound_name': [ref.types.long,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_get_quantifier_bound_sort': [z3types.Sort,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_get_quantifier_body': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_simplify': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_simplify_ex': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Params]],
  'Z3_simplify_get_help': [ref.types.CString,[z3types.Context]],
  'Z3_simplify_get_param_descrs': [z3types.ParamDescrs,[z3types.Context]],
  'Z3_update_term': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_substitute': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint,ref.refType(z3types.Ast),ref.refType(z3types.Ast)]],
  'Z3_substitute_vars': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_translate': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Context]],
  'Z3_model_inc_ref': [ref.types.void,[z3types.Context,z3types.Model]],
  'Z3_model_dec_ref': [ref.types.void,[z3types.Context,z3types.Model]],
  'Z3_model_eval': [ref.types.bool,[z3types.Context,z3types.Model,z3types.Ast,ref.types.bool,ref.refType(z3types.Ast)]],
  'Z3_model_get_const_interp': [z3types.Ast,[z3types.Context,z3types.Model,z3types.FuncDecl]],
  'Z3_model_has_interp': [ref.types.bool,[z3types.Context,z3types.Model,z3types.FuncDecl]],
  'Z3_model_get_func_interp': [z3types.FuncInterp,[z3types.Context,z3types.Model,z3types.FuncDecl]],
  'Z3_model_get_num_consts': [ref.types.uint,[z3types.Context,z3types.Model]],
  'Z3_model_get_const_decl': [z3types.FuncDecl,[z3types.Context,z3types.Model,ref.types.uint]],
  'Z3_model_get_num_funcs': [ref.types.uint,[z3types.Context,z3types.Model]],
  'Z3_model_get_func_decl': [z3types.FuncDecl,[z3types.Context,z3types.Model,ref.types.uint]],
  'Z3_model_get_num_sorts': [ref.types.uint,[z3types.Context,z3types.Model]],
  'Z3_model_get_sort': [z3types.Sort,[z3types.Context,z3types.Model,ref.types.uint]],
  'Z3_model_get_sort_universe': [z3types.AstVector,[z3types.Context,z3types.Model,z3types.Sort]],
  'Z3_is_as_array': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_get_as_array_func_decl': [z3types.FuncDecl,[z3types.Context,z3types.Ast]],
  'Z3_func_interp_inc_ref': [ref.types.void,[z3types.Context,z3types.FuncInterp]],
  'Z3_func_interp_dec_ref': [ref.types.void,[z3types.Context,z3types.FuncInterp]],
  'Z3_func_interp_get_num_entries': [ref.types.uint,[z3types.Context,z3types.FuncInterp]],
  'Z3_func_interp_get_entry': [z3types.FuncEntry,[z3types.Context,z3types.FuncInterp,ref.types.uint]],
  'Z3_func_interp_get_else': [z3types.Ast,[z3types.Context,z3types.FuncInterp]],
  'Z3_func_interp_get_arity': [ref.types.uint,[z3types.Context,z3types.FuncInterp]],
  'Z3_func_entry_inc_ref': [ref.types.void,[z3types.Context,z3types.FuncEntry]],
  'Z3_func_entry_dec_ref': [ref.types.void,[z3types.Context,z3types.FuncEntry]],
  'Z3_func_entry_get_value': [z3types.Ast,[z3types.Context,z3types.FuncEntry]],
  'Z3_func_entry_get_num_args': [ref.types.uint,[z3types.Context,z3types.FuncEntry]],
  'Z3_func_entry_get_arg': [z3types.Ast,[z3types.Context,z3types.FuncEntry,ref.types.uint]],
  'Z3_toggle_warning_messages': [ref.types.void,[ref.types.bool]],
  'Z3_set_ast_print_mode': [ref.types.void,[z3types.Context,ref.types.uint]],
  'Z3_ast_to_string': [ref.types.CString,[z3types.Context,z3types.Ast]],
  'Z3_pattern_to_string': [ref.types.CString,[z3types.Context,z3types.Pattern]],
  'Z3_sort_to_string': [ref.types.CString,[z3types.Context,z3types.Sort]],
  'Z3_func_decl_to_string': [ref.types.CString,[z3types.Context,z3types.FuncDecl]],
  'Z3_model_to_string': [ref.types.CString,[z3types.Context,z3types.Model]],
  'Z3_benchmark_to_smtlib_string': [ref.types.CString,[z3types.Context,ref.types.CString,ref.types.CString,ref.types.CString,ref.types.CString,ref.types.uint,ref.refType(z3types.Ast),z3types.Ast]],
  'Z3_parse_smtlib2_string': [z3types.Ast,[z3types.Context,ref.types.CString,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.Sort),ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.FuncDecl)]],
  'Z3_parse_smtlib2_file': [z3types.Ast,[z3types.Context,ref.types.CString,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.Sort),ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.FuncDecl)]],
  'Z3_parse_smtlib_string': [ref.types.void,[z3types.Context,ref.types.CString,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.Sort),ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.FuncDecl)]],
  'Z3_parse_smtlib_file': [ref.types.void,[z3types.Context,ref.types.CString,ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.Sort),ref.types.uint,ref.refType(ref.types.long),ref.refType(z3types.FuncDecl)]],
  'Z3_get_smtlib_num_formulas': [ref.types.uint,[z3types.Context]],
  'Z3_get_smtlib_formula': [z3types.Ast,[z3types.Context,ref.types.uint]],
  'Z3_get_smtlib_num_assumptions': [ref.types.uint,[z3types.Context]],
  'Z3_get_smtlib_assumption': [z3types.Ast,[z3types.Context,ref.types.uint]],
  'Z3_get_smtlib_num_decls': [ref.types.uint,[z3types.Context]],
  'Z3_get_smtlib_decl': [z3types.FuncDecl,[z3types.Context,ref.types.uint]],
  'Z3_get_smtlib_num_sorts': [ref.types.uint,[z3types.Context]],
  'Z3_get_smtlib_sort': [z3types.Sort,[z3types.Context,ref.types.uint]],
  'Z3_get_smtlib_error': [ref.types.CString,[z3types.Context]],
  'Z3_get_error_code': [ref.types.uint,[z3types.Context]],
  'Z3_set_error': [ref.types.void,[z3types.Context,ref.types.uint]],
  'Z3_get_error_msg': [ref.types.CString,[ref.types.uint]],
  'Z3_get_error_msg_ex': [ref.types.CString,[z3types.Context,ref.types.uint]],
  'Z3_get_version': [ref.types.void,[ref.refType(ref.types.uint),ref.refType(ref.types.uint),ref.refType(ref.types.uint),ref.refType(ref.types.uint)]],
  'Z3_enable_trace': [ref.types.void,[ref.types.CString]],
  'Z3_disable_trace': [ref.types.void,[ref.types.CString]],
  'Z3_reset_memory': [ref.types.void,[]],
  'Z3_finalize_memory': [ref.types.void,[]],
  'Z3_mk_fixedpoint': [z3types.Fixedpoint,[z3types.Context]],
  'Z3_fixedpoint_inc_ref': [ref.types.void,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_dec_ref': [ref.types.void,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_add_rule': [ref.types.void,[z3types.Context,z3types.Fixedpoint,z3types.Ast,ref.types.long]],
  'Z3_fixedpoint_add_fact': [ref.types.void,[z3types.Context,z3types.Fixedpoint,z3types.FuncDecl,ref.types.uint,ref.refType(ref.types.uint)]],
  'Z3_fixedpoint_assert': [ref.types.void,[z3types.Context,z3types.Fixedpoint,z3types.Ast]],
  'Z3_fixedpoint_query': [ref.types.int,[z3types.Context,z3types.Fixedpoint,z3types.Ast]],
  'Z3_fixedpoint_query_relations': [ref.types.int,[z3types.Context,z3types.Fixedpoint,ref.types.uint,ref.refType(z3types.FuncDecl)]],
  'Z3_fixedpoint_get_answer': [z3types.Ast,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_get_reason_unknown': [ref.types.CString,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_update_rule': [ref.types.void,[z3types.Context,z3types.Fixedpoint,z3types.Ast,ref.types.long]],
  'Z3_fixedpoint_get_num_levels': [ref.types.uint,[z3types.Context,z3types.Fixedpoint,z3types.FuncDecl]],
  'Z3_fixedpoint_get_cover_delta': [z3types.Ast,[z3types.Context,z3types.Fixedpoint,ref.types.int,z3types.FuncDecl]],
  'Z3_fixedpoint_add_cover': [ref.types.void,[z3types.Context,z3types.Fixedpoint,ref.types.int,z3types.FuncDecl,z3types.Ast]],
  'Z3_fixedpoint_get_statistics': [z3types.Stats,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_register_relation': [ref.types.void,[z3types.Context,z3types.Fixedpoint,z3types.FuncDecl]],
  'Z3_fixedpoint_set_predicate_representation': [ref.types.void,[z3types.Context,z3types.Fixedpoint,z3types.FuncDecl,ref.types.uint,ref.refType(ref.types.long)]],
  'Z3_fixedpoint_get_rules': [z3types.AstVector,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_get_assertions': [z3types.AstVector,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_set_params': [ref.types.void,[z3types.Context,z3types.Fixedpoint,z3types.Params]],
  'Z3_fixedpoint_get_help': [ref.types.CString,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_get_param_descrs': [z3types.ParamDescrs,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_to_string': [ref.types.CString,[z3types.Context,z3types.Fixedpoint,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_fixedpoint_from_string': [z3types.AstVector,[z3types.Context,z3types.Fixedpoint,ref.types.CString]],
  'Z3_fixedpoint_from_file': [z3types.AstVector,[z3types.Context,z3types.Fixedpoint,ref.types.CString]],
  'Z3_fixedpoint_push': [ref.types.void,[z3types.Context,z3types.Fixedpoint]],
  'Z3_fixedpoint_pop': [ref.types.void,[z3types.Context,z3types.Fixedpoint]],
  'Z3_mk_optimize': [z3types.Optimize,[z3types.Context]],
  'Z3_optimize_inc_ref': [ref.types.void,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_dec_ref': [ref.types.void,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_assert': [ref.types.void,[z3types.Context,z3types.Optimize,z3types.Ast]],
  'Z3_optimize_assert_soft': [ref.types.uint,[z3types.Context,z3types.Optimize,z3types.Ast,ref.types.CString,ref.types.long]],
  'Z3_optimize_maximize': [ref.types.uint,[z3types.Context,z3types.Optimize,z3types.Ast]],
  'Z3_optimize_minimize': [ref.types.uint,[z3types.Context,z3types.Optimize,z3types.Ast]],
  'Z3_optimize_push': [ref.types.void,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_pop': [ref.types.void,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_check': [ref.types.int,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_get_reason_unknown': [ref.types.CString,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_get_model': [z3types.Model,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_set_params': [ref.types.void,[z3types.Context,z3types.Optimize,z3types.Params]],
  'Z3_optimize_get_param_descrs': [z3types.ParamDescrs,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_get_lower': [z3types.Ast,[z3types.Context,z3types.Optimize,ref.types.uint]],
  'Z3_optimize_get_upper': [z3types.Ast,[z3types.Context,z3types.Optimize,ref.types.uint]],
  'Z3_optimize_to_string': [ref.types.CString,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_get_help': [ref.types.CString,[z3types.Context,z3types.Optimize]],
  'Z3_optimize_get_statistics': [z3types.Stats,[z3types.Context,z3types.Optimize]],
  'Z3_mk_ast_vector': [z3types.AstVector,[z3types.Context]],
  'Z3_ast_vector_inc_ref': [ref.types.void,[z3types.Context,z3types.AstVector]],
  'Z3_ast_vector_dec_ref': [ref.types.void,[z3types.Context,z3types.AstVector]],
  'Z3_ast_vector_size': [ref.types.uint,[z3types.Context,z3types.AstVector]],
  'Z3_ast_vector_get': [z3types.Ast,[z3types.Context,z3types.AstVector,ref.types.uint]],
  'Z3_ast_vector_set': [ref.types.void,[z3types.Context,z3types.AstVector,ref.types.uint,z3types.Ast]],
  'Z3_ast_vector_resize': [ref.types.void,[z3types.Context,z3types.AstVector,ref.types.uint]],
  'Z3_ast_vector_push': [ref.types.void,[z3types.Context,z3types.AstVector,z3types.Ast]],
  'Z3_ast_vector_translate': [z3types.AstVector,[z3types.Context,z3types.AstVector,z3types.Context]],
  'Z3_ast_vector_to_string': [ref.types.CString,[z3types.Context,z3types.AstVector]],
  'Z3_mk_ast_map': [z3types.AstMap,[z3types.Context]],
  'Z3_ast_map_inc_ref': [ref.types.void,[z3types.Context,z3types.AstMap]],
  'Z3_ast_map_dec_ref': [ref.types.void,[z3types.Context,z3types.AstMap]],
  'Z3_ast_map_contains': [ref.types.bool,[z3types.Context,z3types.AstMap,z3types.Ast]],
  'Z3_ast_map_find': [z3types.Ast,[z3types.Context,z3types.AstMap,z3types.Ast]],
  'Z3_ast_map_insert': [ref.types.void,[z3types.Context,z3types.AstMap,z3types.Ast,z3types.Ast]],
  'Z3_ast_map_erase': [ref.types.void,[z3types.Context,z3types.AstMap,z3types.Ast]],
  'Z3_ast_map_reset': [ref.types.void,[z3types.Context,z3types.AstMap]],
  'Z3_ast_map_size': [ref.types.uint,[z3types.Context,z3types.AstMap]],
  'Z3_ast_map_keys': [z3types.AstVector,[z3types.Context,z3types.AstMap]],
  'Z3_ast_map_to_string': [ref.types.CString,[z3types.Context,z3types.AstMap]],
  'Z3_mk_goal': [z3types.Goal,[z3types.Context,ref.types.bool,ref.types.bool,ref.types.bool]],
  'Z3_goal_inc_ref': [ref.types.void,[z3types.Context,z3types.Goal]],
  'Z3_goal_dec_ref': [ref.types.void,[z3types.Context,z3types.Goal]],
  'Z3_goal_precision': [ref.types.uint,[z3types.Context,z3types.Goal]],
  'Z3_goal_assert': [ref.types.void,[z3types.Context,z3types.Goal,z3types.Ast]],
  'Z3_goal_inconsistent': [ref.types.bool,[z3types.Context,z3types.Goal]],
  'Z3_goal_depth': [ref.types.uint,[z3types.Context,z3types.Goal]],
  'Z3_goal_reset': [ref.types.void,[z3types.Context,z3types.Goal]],
  'Z3_goal_size': [ref.types.uint,[z3types.Context,z3types.Goal]],
  'Z3_goal_formula': [z3types.Ast,[z3types.Context,z3types.Goal,ref.types.uint]],
  'Z3_goal_num_exprs': [ref.types.uint,[z3types.Context,z3types.Goal]],
  'Z3_goal_is_decided_sat': [ref.types.bool,[z3types.Context,z3types.Goal]],
  'Z3_goal_is_decided_unsat': [ref.types.bool,[z3types.Context,z3types.Goal]],
  'Z3_goal_translate': [z3types.Goal,[z3types.Context,z3types.Goal,z3types.Context]],
  'Z3_goal_to_string': [ref.types.CString,[z3types.Context,z3types.Goal]],
  'Z3_mk_tactic': [z3types.Tactic,[z3types.Context,ref.types.CString]],
  'Z3_tactic_inc_ref': [ref.types.void,[z3types.Context,z3types.Tactic]],
  'Z3_tactic_dec_ref': [ref.types.void,[z3types.Context,z3types.Tactic]],
  'Z3_mk_probe': [z3types.Probe,[z3types.Context,ref.types.CString]],
  'Z3_probe_inc_ref': [ref.types.void,[z3types.Context,z3types.Probe]],
  'Z3_probe_dec_ref': [ref.types.void,[z3types.Context,z3types.Probe]],
  'Z3_tactic_and_then': [z3types.Tactic,[z3types.Context,z3types.Tactic,z3types.Tactic]],
  'Z3_tactic_or_else': [z3types.Tactic,[z3types.Context,z3types.Tactic,z3types.Tactic]],
  'Z3_tactic_par_or': [z3types.Tactic,[z3types.Context,ref.types.uint,ref.refType(z3types.Tactic)]],
  'Z3_tactic_par_and_then': [z3types.Tactic,[z3types.Context,z3types.Tactic,z3types.Tactic]],
  'Z3_tactic_try_for': [z3types.Tactic,[z3types.Context,z3types.Tactic,ref.types.uint]],
  'Z3_tactic_when': [z3types.Tactic,[z3types.Context,z3types.Probe,z3types.Tactic]],
  'Z3_tactic_cond': [z3types.Tactic,[z3types.Context,z3types.Probe,z3types.Tactic,z3types.Tactic]],
  'Z3_tactic_repeat': [z3types.Tactic,[z3types.Context,z3types.Tactic,ref.types.uint]],
  'Z3_tactic_skip': [z3types.Tactic,[z3types.Context]],
  'Z3_tactic_fail': [z3types.Tactic,[z3types.Context]],
  'Z3_tactic_fail_if': [z3types.Tactic,[z3types.Context,z3types.Probe]],
  'Z3_tactic_fail_if_not_decided': [z3types.Tactic,[z3types.Context]],
  'Z3_tactic_using_params': [z3types.Tactic,[z3types.Context,z3types.Tactic,z3types.Params]],
  'Z3_probe_const': [z3types.Probe,[z3types.Context,ref.types.double]],
  'Z3_probe_lt': [z3types.Probe,[z3types.Context,z3types.Probe,z3types.Probe]],
  'Z3_probe_gt': [z3types.Probe,[z3types.Context,z3types.Probe,z3types.Probe]],
  'Z3_probe_le': [z3types.Probe,[z3types.Context,z3types.Probe,z3types.Probe]],
  'Z3_probe_ge': [z3types.Probe,[z3types.Context,z3types.Probe,z3types.Probe]],
  'Z3_probe_eq': [z3types.Probe,[z3types.Context,z3types.Probe,z3types.Probe]],
  'Z3_probe_and': [z3types.Probe,[z3types.Context,z3types.Probe,z3types.Probe]],
  'Z3_probe_or': [z3types.Probe,[z3types.Context,z3types.Probe,z3types.Probe]],
  'Z3_probe_not': [z3types.Probe,[z3types.Context,z3types.Probe]],
  'Z3_get_num_tactics': [ref.types.uint,[z3types.Context]],
  'Z3_get_tactic_name': [ref.types.CString,[z3types.Context,ref.types.uint]],
  'Z3_get_num_probes': [ref.types.uint,[z3types.Context]],
  'Z3_get_probe_name': [ref.types.CString,[z3types.Context,ref.types.uint]],
  'Z3_tactic_get_help': [ref.types.CString,[z3types.Context,z3types.Tactic]],
  'Z3_tactic_get_param_descrs': [z3types.ParamDescrs,[z3types.Context,z3types.Tactic]],
  'Z3_tactic_get_descr': [ref.types.CString,[z3types.Context,ref.types.CString]],
  'Z3_probe_get_descr': [ref.types.CString,[z3types.Context,ref.types.CString]],
  'Z3_probe_apply': [ref.types.double,[z3types.Context,z3types.Probe,z3types.Goal]],
  'Z3_tactic_apply': [z3types.ApplyResult,[z3types.Context,z3types.Tactic,z3types.Goal]],
  'Z3_tactic_apply_ex': [z3types.ApplyResult,[z3types.Context,z3types.Tactic,z3types.Goal,z3types.Params]],
  'Z3_apply_result_inc_ref': [ref.types.void,[z3types.Context,z3types.ApplyResult]],
  'Z3_apply_result_dec_ref': [ref.types.void,[z3types.Context,z3types.ApplyResult]],
  'Z3_apply_result_to_string': [ref.types.CString,[z3types.Context,z3types.ApplyResult]],
  'Z3_apply_result_get_num_subgoals': [ref.types.uint,[z3types.Context,z3types.ApplyResult]],
  'Z3_apply_result_get_subgoal': [z3types.Goal,[z3types.Context,z3types.ApplyResult,ref.types.uint]],
  'Z3_apply_result_convert_model': [z3types.Model,[z3types.Context,z3types.ApplyResult,ref.types.uint,z3types.Model]],
  'Z3_mk_solver': [z3types.Solver,[z3types.Context]],
  'Z3_mk_simple_solver': [z3types.Solver,[z3types.Context]],
  'Z3_mk_solver_for_logic': [z3types.Solver,[z3types.Context,ref.types.long]],
  'Z3_mk_solver_from_tactic': [z3types.Solver,[z3types.Context,z3types.Tactic]],
  'Z3_solver_get_help': [ref.types.CString,[z3types.Context,z3types.Solver]],
  'Z3_solver_get_param_descrs': [z3types.ParamDescrs,[z3types.Context,z3types.Solver]],
  'Z3_solver_set_params': [ref.types.void,[z3types.Context,z3types.Solver,z3types.Params]],
  'Z3_solver_inc_ref': [ref.types.void,[z3types.Context,z3types.Solver]],
  'Z3_solver_dec_ref': [ref.types.void,[z3types.Context,z3types.Solver]],
  'Z3_solver_push': [ref.types.void,[z3types.Context,z3types.Solver]],
  'Z3_solver_pop': [ref.types.void,[z3types.Context,z3types.Solver,ref.types.uint]],
  'Z3_solver_reset': [ref.types.void,[z3types.Context,z3types.Solver]],
  'Z3_solver_get_num_scopes': [ref.types.uint,[z3types.Context,z3types.Solver]],
  'Z3_solver_assert': [ref.types.void,[z3types.Context,z3types.Solver,z3types.Ast]],
  'Z3_solver_assert_and_track': [ref.types.void,[z3types.Context,z3types.Solver,z3types.Ast,z3types.Ast]],
  'Z3_solver_get_assertions': [z3types.AstVector,[z3types.Context,z3types.Solver]],
  'Z3_solver_check': [ref.types.int,[z3types.Context,z3types.Solver]],
  'Z3_solver_check_assumptions': [ref.types.int,[z3types.Context,z3types.Solver,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_solver_get_model': [z3types.Model,[z3types.Context,z3types.Solver]],
  'Z3_solver_get_proof': [z3types.Ast,[z3types.Context,z3types.Solver]],
  'Z3_solver_get_unsat_core': [z3types.AstVector,[z3types.Context,z3types.Solver]],
  'Z3_solver_get_reason_unknown': [ref.types.CString,[z3types.Context,z3types.Solver]],
  'Z3_solver_get_statistics': [z3types.Stats,[z3types.Context,z3types.Solver]],
  'Z3_solver_to_string': [ref.types.CString,[z3types.Context,z3types.Solver]],
  'Z3_stats_to_string': [ref.types.CString,[z3types.Context,z3types.Stats]],
  'Z3_stats_inc_ref': [ref.types.void,[z3types.Context,z3types.Stats]],
  'Z3_stats_dec_ref': [ref.types.void,[z3types.Context,z3types.Stats]],
  'Z3_stats_size': [ref.types.uint,[z3types.Context,z3types.Stats]],
  'Z3_stats_get_key': [ref.types.CString,[z3types.Context,z3types.Stats,ref.types.uint]],
  'Z3_stats_is_uint': [ref.types.bool,[z3types.Context,z3types.Stats,ref.types.uint]],
  'Z3_stats_is_double': [ref.types.bool,[z3types.Context,z3types.Stats,ref.types.uint]],
  'Z3_stats_get_uint_value': [ref.types.uint,[z3types.Context,z3types.Stats,ref.types.uint]],
  'Z3_stats_get_double_value': [ref.types.double,[z3types.Context,z3types.Stats,ref.types.uint]],
  'Z3_mk_injective_function': [z3types.FuncDecl,[z3types.Context,ref.types.long,ref.types.uint,ref.refType(z3types.Sort),z3types.Sort]],
  'Z3_set_logic': [ref.types.void,[z3types.Context,ref.types.CString]],
  'Z3_push': [ref.types.void,[z3types.Context]],
  'Z3_pop': [ref.types.void,[z3types.Context,ref.types.uint]],
  'Z3_get_num_scopes': [ref.types.uint,[z3types.Context]],
  'Z3_persist_ast': [ref.types.void,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_assert_cnstr': [ref.types.void,[z3types.Context,z3types.Ast]],
  'Z3_check_and_get_model': [ref.types.int,[z3types.Context,ref.refType(z3types.Model)]],
  'Z3_check': [ref.types.int,[z3types.Context]],
  'Z3_check_assumptions': [ref.types.int,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast),ref.refType(z3types.Model),ref.refType(z3types.Ast),ref.refType(ref.types.uint),ref.refType(z3types.Ast)]],
  'Z3_get_implied_equalities': [ref.types.int,[z3types.Context,z3types.Solver,ref.types.uint,ref.refType(z3types.Ast),ref.refType(ref.types.uint)]],
  'Z3_del_model': [ref.types.void,[z3types.Context,z3types.Model]],
  'Z3_soft_check_cancel': [ref.types.void,[z3types.Context]],
  'Z3_get_search_failure': [ref.types.uint,[z3types.Context]],
  'Z3_mk_label': [z3types.Ast,[z3types.Context,ref.types.long,ref.types.bool,z3types.Ast]],
  'Z3_get_relevant_labels': [z3types.Literals,[z3types.Context]],
  'Z3_get_relevant_literals': [z3types.Literals,[z3types.Context]],
  'Z3_get_guessed_literals': [z3types.Literals,[z3types.Context]],
  'Z3_del_literals': [ref.types.void,[z3types.Context,z3types.Literals]],
  'Z3_get_num_literals': [ref.types.uint,[z3types.Context,z3types.Literals]],
  'Z3_get_label_symbol': [ref.types.long,[z3types.Context,z3types.Literals,ref.types.uint]],
  'Z3_get_literal': [z3types.Ast,[z3types.Context,z3types.Literals,ref.types.uint]],
  'Z3_disable_literal': [ref.types.void,[z3types.Context,z3types.Literals,ref.types.uint]],
  'Z3_block_literals': [ref.types.void,[z3types.Context,z3types.Literals]],
  'Z3_get_model_num_constants': [ref.types.uint,[z3types.Context,z3types.Model]],
  'Z3_get_model_constant': [z3types.FuncDecl,[z3types.Context,z3types.Model,ref.types.uint]],
  'Z3_get_model_num_funcs': [ref.types.uint,[z3types.Context,z3types.Model]],
  'Z3_get_model_func_decl': [z3types.FuncDecl,[z3types.Context,z3types.Model,ref.types.uint]],
  'Z3_eval_func_decl': [ref.types.bool,[z3types.Context,z3types.Model,z3types.FuncDecl,ref.refType(z3types.Ast)]],
  'Z3_is_array_value': [ref.types.bool,[z3types.Context,z3types.Model,z3types.Ast,ref.refType(ref.types.uint)]],
  'Z3_get_array_value': [ref.types.void,[z3types.Context,z3types.Model,z3types.Ast,ref.types.uint,ref.refType(z3types.Ast),ref.refType(z3types.Ast),ref.refType(z3types.Ast)]],
  'Z3_get_model_func_else': [z3types.Ast,[z3types.Context,z3types.Model,ref.types.uint]],
  'Z3_get_model_func_num_entries': [ref.types.uint,[z3types.Context,z3types.Model,ref.types.uint]],
  'Z3_get_model_func_entry_num_args': [ref.types.uint,[z3types.Context,z3types.Model,ref.types.uint,ref.types.uint]],
  'Z3_get_model_func_entry_arg': [z3types.Ast,[z3types.Context,z3types.Model,ref.types.uint,ref.types.uint,ref.types.uint]],
  'Z3_get_model_func_entry_value': [z3types.Ast,[z3types.Context,z3types.Model,ref.types.uint,ref.types.uint]],
  'Z3_eval': [ref.types.bool,[z3types.Context,z3types.Model,z3types.Ast,ref.refType(z3types.Ast)]],
  'Z3_eval_decl': [ref.types.bool,[z3types.Context,z3types.Model,z3types.FuncDecl,ref.types.uint,ref.refType(z3types.Ast),ref.refType(z3types.Ast)]],
  'Z3_context_to_string': [ref.types.CString,[z3types.Context]],
  'Z3_statistics_to_string': [ref.types.CString,[z3types.Context]],
  'Z3_get_context_assignment': [z3types.Ast,[z3types.Context]],
  'Z3_algebraic_is_value': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_algebraic_is_pos': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_algebraic_is_neg': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_algebraic_is_zero': [ref.types.bool,[z3types.Context,z3types.Ast]],
  'Z3_algebraic_sign': [ref.types.int,[z3types.Context,z3types.Ast]],
  'Z3_algebraic_add': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_sub': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_mul': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_div': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_root': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_algebraic_power': [z3types.Ast,[z3types.Context,z3types.Ast,ref.types.uint]],
  'Z3_algebraic_lt': [ref.types.bool,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_gt': [ref.types.bool,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_le': [ref.types.bool,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_ge': [ref.types.bool,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_eq': [ref.types.bool,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_neq': [ref.types.bool,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_algebraic_roots': [z3types.AstVector,[z3types.Context,z3types.Ast,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_algebraic_eval': [ref.types.int,[z3types.Context,z3types.Ast,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_polynomial_subresultants': [z3types.AstVector,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_rcf_del': [ref.types.void,[z3types.Context,z3types.RcfNum]],
  'Z3_rcf_mk_rational': [z3types.RcfNum,[z3types.Context,ref.types.CString]],
  'Z3_rcf_mk_small_int': [z3types.RcfNum,[z3types.Context,ref.types.int]],
  'Z3_rcf_mk_pi': [z3types.RcfNum,[z3types.Context]],
  'Z3_rcf_mk_e': [z3types.RcfNum,[z3types.Context]],
  'Z3_rcf_mk_infinitesimal': [z3types.RcfNum,[z3types.Context]],
  'Z3_rcf_mk_roots': [ref.types.uint,[z3types.Context,ref.types.uint,ref.refType(z3types.RcfNum),ref.refType(z3types.RcfNum)]],
  'Z3_rcf_add': [z3types.RcfNum,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_sub': [z3types.RcfNum,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_mul': [z3types.RcfNum,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_div': [z3types.RcfNum,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_neg': [z3types.RcfNum,[z3types.Context,z3types.RcfNum]],
  'Z3_rcf_inv': [z3types.RcfNum,[z3types.Context,z3types.RcfNum]],
  'Z3_rcf_power': [z3types.RcfNum,[z3types.Context,z3types.RcfNum,ref.types.uint]],
  'Z3_rcf_lt': [ref.types.bool,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_gt': [ref.types.bool,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_le': [ref.types.bool,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_ge': [ref.types.bool,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_eq': [ref.types.bool,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_neq': [ref.types.bool,[z3types.Context,z3types.RcfNum,z3types.RcfNum]],
  'Z3_rcf_num_to_string': [ref.types.CString,[z3types.Context,z3types.RcfNum,ref.types.bool,ref.types.bool]],
  'Z3_rcf_num_to_decimal_string': [ref.types.CString,[z3types.Context,z3types.RcfNum,ref.types.uint]],
  'Z3_rcf_get_numerator_denominator': [ref.types.void,[z3types.Context,z3types.RcfNum,ref.refType(z3types.RcfNum),ref.refType(z3types.RcfNum)]],
  'Z3_mk_interpolant': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_interpolation_context': [z3types.Context,[z3types.Config]],
  'Z3_get_interpolant': [z3types.AstVector,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Params]],
  'Z3_compute_interpolant': [ref.types.int,[z3types.Context,z3types.Ast,z3types.Params,ref.refType(z3types.AstVector),ref.refType(z3types.Model)]],
  'Z3_interpolation_profile': [ref.types.CString,[z3types.Context]],
  'Z3_read_interpolation_problem': [ref.types.int,[z3types.Context,ref.refType(ref.types.uint),z3types.Ast,ref.types.uint,ref.types.CString,ref.refType(ref.types.CString),ref.refType(ref.types.uint),z3types.Ast]],
  'Z3_check_interpolant': [ref.types.int,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast),ref.refType(ref.types.uint),ref.refType(z3types.Ast),ref.refType(ref.types.CString),ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_write_interpolation_problem': [ref.types.void,[z3types.Context,ref.types.uint,ref.refType(z3types.Ast),ref.refType(ref.types.uint),ref.types.CString,ref.types.uint,ref.refType(z3types.Ast)]],
  'Z3_mk_fpa_rounding_mode_sort': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_round_nearest_ties_to_even': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_rne': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_round_nearest_ties_to_away': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_rna': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_round_toward_positive': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_rtp': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_round_toward_negative': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_rtn': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_round_toward_zero': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_rtz': [z3types.Ast,[z3types.Context]],
  'Z3_mk_fpa_sort': [z3types.Sort,[z3types.Context,ref.types.uint,ref.types.uint]],
  'Z3_mk_fpa_sort_half': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_sort_16': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_sort_single': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_sort_32': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_sort_double': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_sort_64': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_sort_quadruple': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_sort_128': [z3types.Sort,[z3types.Context]],
  'Z3_mk_fpa_nan': [z3types.Ast,[z3types.Context,z3types.Sort]],
  'Z3_mk_fpa_inf': [z3types.Ast,[z3types.Context,z3types.Sort,ref.types.bool]],
  'Z3_mk_fpa_zero': [z3types.Ast,[z3types.Context,z3types.Sort,ref.types.bool]],
  'Z3_mk_fpa_fp': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_numeral_float': [z3types.Ast,[z3types.Context,ref.types.float,z3types.Sort]],
  'Z3_mk_fpa_numeral_double': [z3types.Ast,[z3types.Context,ref.types.double,z3types.Sort]],
  'Z3_mk_fpa_numeral_int': [z3types.Ast,[z3types.Context,ref.types.int,z3types.Sort]],
  'Z3_mk_fpa_numeral_int_uint': [z3types.Ast,[z3types.Context,ref.types.bool,ref.types.int,ref.types.uint,z3types.Sort]],
  'Z3_mk_fpa_numeral_int64_uint64': [z3types.Ast,[z3types.Context,ref.types.bool,ref.types.int64,ref.types.uint64,z3types.Sort]],
  'Z3_mk_fpa_abs': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_neg': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_add': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_sub': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_mul': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_div': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_fma': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_sqrt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_rem': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_round_to_integral': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_min': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_max': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_leq': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_lt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_geq': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_gt': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_eq': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast]],
  'Z3_mk_fpa_is_normal': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_is_subnormal': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_is_zero': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_is_infinite': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_is_nan': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_is_negative': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_is_positive': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_to_fp_bv': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Sort]],
  'Z3_mk_fpa_to_fp_float': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Sort]],
  'Z3_mk_fpa_to_fp_real': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Sort]],
  'Z3_mk_fpa_to_fp_signed': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Sort]],
  'Z3_mk_fpa_to_fp_unsigned': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Sort]],
  'Z3_mk_fpa_to_ubv': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,ref.types.uint]],
  'Z3_mk_fpa_to_sbv': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,ref.types.uint]],
  'Z3_mk_fpa_to_real': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_fpa_get_ebits': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_fpa_get_sbits': [ref.types.uint,[z3types.Context,z3types.Sort]],
  'Z3_fpa_get_numeral_sign': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.int)]],
  'Z3_fpa_get_numeral_significand_string': [ref.types.CString,[z3types.Context,z3types.Ast]],
  'Z3_fpa_get_numeral_significand_uint64': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.uint64)]],
  'Z3_fpa_get_numeral_exponent_string': [ref.types.CString,[z3types.Context,z3types.Ast]],
  'Z3_fpa_get_numeral_exponent_int64': [ref.types.bool,[z3types.Context,z3types.Ast,ref.refType(ref.types.int64)]],
  'Z3_mk_fpa_to_ieee_bv': [z3types.Ast,[z3types.Context,z3types.Ast]],
  'Z3_mk_fpa_to_fp_int_real': [z3types.Ast,[z3types.Context,z3types.Ast,z3types.Ast,z3types.Ast,z3types.Sort]]

});
